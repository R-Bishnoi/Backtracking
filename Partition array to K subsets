
//you can also print all partition 



//if you want to print then use this code reference pepcoding
/*
class Solution{
  public:
  
  bool res=false;
  
  
  void solve(int arr[],vector<vector<int>>&ans,vector<int>&sum,int count,int id,int n,int k){
      
   
   if(id==n){
       
       if(count==k){
        bool flag=true;
        
        for(int p=0;p<sum.size()-1;p++){
            if(sum[p]!=sum[p+1]){
                flag=false;
                break;
            }
        }
        
        if(flag)res=true;
          
           
       }
       
       return;
   }
   
   
   for(int j=0;j<ans.size();j++){
     
    //try all non empty part
    
    if(ans[j].size()>0){
      ans[j].push_back(arr[id]);
      sum[j]+=arr[id];
     solve(arr,ans,sum,count,id+1,n,k);
     ans[j].pop_back();
     sum[j]-=arr[id];
    }
    
    
    //try only one empty part
    
    else{
        
        ans[j].push_back(arr[id]);
      sum[j]+=arr[id];
     solve(arr,ans,sum,count+1,id+1,n,k);
     ans[j].pop_back();
     sum[j]-=arr[id];  
        
        break;
    }
       
       
       
   }    
      
      
  }
  
  
    bool isKPartitionPossible(int arr[], int n, int k){
    
    int t=0;
    for(int i=0;i<n;i++){
        t+=arr[i];
    }
    
    
    if(k>n)return false;
    else if(t%k!=0)return false;
    else if(k==1)return true;
    
    
    vector<vector<int>>ans;
    vector<int>sum(k);   
    
   for(int i=0;i<k;i++)
     ans.push_back({});
    
 solve(arr,ans,sum,0,0,n,k);
 
 return res;
 
   
        

    }
    
    
    
};

*/





